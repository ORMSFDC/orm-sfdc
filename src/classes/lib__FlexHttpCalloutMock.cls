/*
This file is generated and isn't the actual source code for this
managed global class.
This read-only file shows the class's global constructors,
methods, variables, and properties.
To enable code to compile, all methods return null.
*/
global class FlexHttpCalloutMock implements System.HttpCalloutMock {
    global FlexHttpCalloutMock() {

    }
    global lib.FlexHttpCalloutMock clear() {
        return null;
    }
    global lib.FlexHttpCalloutMock clearConfigs() {
        return null;
    }
    global List<lib.HttpCalloutCall> getCalloutCalls() {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyContainsReturn(String reqBody, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyContainsReturn(String reqBody, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyEndsWithReturn(String reqBody, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyEndsWithReturn(String reqBody, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyEqualsReturn(String reqBody, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyEqualsReturn(String reqBody, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyStartsWithReturn(String reqBody, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifBodyStartsWithReturn(String reqBody, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlContainsIcReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlContainsIcReturn(String url, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlContainsReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlContainsReturn(String url, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEndsWithIcReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEndsWithIcReturn(String url, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEndsWithReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEndsWithReturn(String url, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEqualsCountReturn(String url, Integer count, Integer httpStatus, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEqualsIcReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEqualsIcReturn(String url, Integer httpCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEqualsReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlEqualsReturn(String url, Integer httpCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlStartsWithIcReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlStartsWithIcReturn(String url, Integer statusCode, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlStartsWithReturn(String url, Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock ifUrlStartsWithReturn(String url, Integer statusCode, Object body) {
        return null;
    }
    global System.HttpResponse respond(System.HttpRequest req) {
        return null;
    }
    global lib.FlexHttpCalloutMock setMock() {
        return null;
    }
    global lib.FlexHttpCalloutMock withConfig(lib.HttpRequestMatcher matcher, lib.FlexHttpResponseProvider provider) {
        return null;
    }
    global lib.FlexHttpCalloutMock withDefaultResponse(System.HttpResponse defaultResponse) {
        return null;
    }
    global lib.FlexHttpCalloutMock withDefaultResponse(Object body) {
        return null;
    }
    global lib.FlexHttpCalloutMock withDefaultResponse(Integer statusCode, Object body) {
        return null;
    }
}
